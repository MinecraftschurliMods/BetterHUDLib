plugins {
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle'
    id 'org.parchmentmc.librarian.forgegradle'
}

group = "${lib_group}"
version = "${lib_version}+${mc_version}"

if (System.getenv('RELEASE_TYPE') != null) {
    status = System.getenv('RELEASE_TYPE').toLowerCase()
    if (status == 'snapshot') status = status.toUpperCase()
    version = "${version}-${status}"
} else {
    version = "${version}-SNAPSHOT"
    status = 'SNAPSHOT'
}

archivesBaseName = lib_id

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(java_version as int)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
    withSourcesJar()
    withJavadocJar()
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"
    runs {
        client
        server
        gameTestServer
        data {
            args '--mod', lib_id, '--all', '--output', file('src/main/generated/'), '--existing', file('src/main/resources/')
        }
    }
    runs.configureEach {
        workingDirectory project.file('run')
        property 'forge.logging.markers', 'REGISTRIES'
        property 'forge.logging.console.level', 'debug'
        if (it.name != 'data') {
            property 'forge.enabledGameTestNamespaces', lib_id
        }

        mods.create(lib_id) {
            source sourceSets.main
            source sourceSets.test
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/main/generated' }

repositories {
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
}

tasks.withType(Jar).configureEach {
    from 'LICENSE.md'
    manifest {
        attributes([
                'Maven-Artifact'          : "${group}:${archivesBaseName}:${version}",
                'Specification-Title'     : archivesBaseName,
                'Specification-Vendor'    : vendor,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : archivesBaseName,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : vendor,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestampe'              : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : mc_version,
                'FMLModType'              : 'GAMELIBRARY',
                'LICENSE'                 : 'MIT'
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = java_version as int
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

jar.finalizedBy('reobfJar')
