plugins {
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle'
    id 'org.parchmentmc.librarian.forgegradle'
}

group = "${project.lib_group}"
version = "${project.mc_version}-${project.lib_version}"
archivesBaseName = "${project.lib_id}"

if (System.getenv('RELEASE_TYPE') != null) {
    status = System.getenv('RELEASE_TYPE').toLowerCase()
    if (status == 'snapshot') status = status.toUpperCase()
} else {
    status = 'SNAPSHOT'
}
if (status != 'release') {
    version = "${version}-${status}"
}

archivesBaseName = lib_id

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(java_version as int)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
    withSourcesJar()
    withJavadocJar()
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"
    runs {
        client
        server
        gameTestServer
        data {
            args '--mod', lib_id, '--all', '--output', file('src/main/generated/'), '--existing', file('src/main/resources/')
        }
    }
    runs.configureEach {
        workingDirectory project.file('run')
        property 'forge.logging.markers', 'REGISTRIES'
        property 'forge.logging.console.level', 'debug'
        if (it.name != 'data') {
            property 'forge.enabledGameTestNamespaces', lib_id
        }

        mods.create(lib_id) {
            source sourceSets.main
            source sourceSets.test
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/main/generated' }

configurations {
    deobfJar {
        canBeConsumed = true
        canBeResolved = false
    }
}

repositories {
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
}

javadoc {
    options.encoding = 'UTF-8'
    options.tags = [
            'side:a:Side:',
            'apiNote:a:API Note:',
            'implSpec:a:Implementation Requirements:',
            'implNote:a:Implementation Note:'
    ]
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

tasks.withType(Jar).configureEach {
    from 'LICENSE.md'
    manifest {
        attributes([
                'Maven-Artifact'          : "${group}:${archivesBaseName}:${version}",
                'Specification-Title'     : archivesBaseName,
                'Specification-Vendor'    : vendor,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : archivesBaseName,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : vendor,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestampe'              : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : mc_version,
                'FMLModType'              : 'GAMELIBRARY',
                'LICENSE'                 : 'MIT'
        ])
    }
}

task deobfJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('deobf')
    from sourceSets.main.output
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = java_version as int
}

artifacts {
    archives jar
    archives deobfJar
    archives sourcesJar
    archives javadocJar
    deobfJar(deobfJar)
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

publishing {
    publications.create(project.archivesBaseName+'ToMaven', MavenPublication) {
        artifacts = [deobfJar]
        groupId = project.group
        artifactId = project.archivesBaseName
        version = project.version
        from components.java
        pom {
            name = project.name
            url = project.url
            packaging = 'jar'
            scm {
                connection = "scm:git:git://github.com/${project.github}.git"
                developerConnection = "scm:git:git@github.com:${project.github}.git"
                url = "https://github.com/${project.github}"
            }
            issueManagement {
                system = 'github'
                url = "https://github.com/${project.github}.git/issues"
            }
            organization {
                name = 'Minecraftschurli Mods'
                url = 'https://github.com/Minecraftschurli'
            }
            developers {
                developer {
                    id = 'minecraftschurli'
                    name = 'Minecraftschurli'
                    email = 'minecraftschurli@gmail.com'
                    organization = 'Minecraftschurli Mods'
                    organizationUrl = 'https://github.com/Minecraftschurli'
                    timezone = 'Europe/Vienna'
                }
            }
            licenses {
                license {
                    name = 'MIT'
                    url = "https://github.com/${project.github}/blob/main/LICENSE"
                    distribution = 'repo'
                }
            }
            withXml {
                asNode().dependencies.dependency.each { dep ->
                    if(dep.version.last().value().last().contains('_mapped_')) {
                        assert dep.parent().remove(dep)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (
            (System.getenv("MAVEN_USER") != null) &&
                    (System.getenv("MAVEN_PASSWORD") != null) &&
                    (System.getenv("MAVEN_URL") != null)
            ) {
                url System.getenv("MAVEN_URL")
                credentials {
                    username System.getenv("MAVEN_USER")
                    password System.getenv("MAVEN_PASSWORD")
                }
            } else {
                url "$buildDir/repo"
            }
        }
    }
}

jar.finalizedBy('reobfJar')
